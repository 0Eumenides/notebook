import{_ as o,p as e,q as n,a1 as r}from"./framework-e03faf0e.js";const i={},c=r('<p>CornerNet模型使用了一种称为Corner Pooling的技术来帮助检测物体边界框的角点。Corner Pooling是一种特殊的池化层，它的目的是捕捉图像中的局部极值，从而有助于检测关键点。Corner Pooling主要有两个方向的池化操作：水平方向和垂直方向。</p><p><img src="https://raw.githubusercontent.com/0Eumenides/upic/main/2023/04/25/image-20230425134206707.png" alt="image-20230425134206707"></p><p>但如果对一张图上的特征值的每个像素点都执行这样的操作，会被变得非常的繁琐，因此论文提出了一个高效的方法：</p><p><img src="https://raw.githubusercontent.com/0Eumenides/upic/main/2023/04/25/image-20230425134323757.png" alt="image-20230425134323757"></p><p>这种Corner Pooling方法有助于捕捉物体边界框的角点，因为它可以找到水平和垂直方向上的局部极值，这些极值通常对应于物体角点的位置。通过在特征图中发现这些极值，CornerNet可以更准确地检测物体边界框的角点，并提高整体的目标检测性能。</p><h1 id="cascade-corner-pooling" tabindex="-1"><a class="header-anchor" href="#cascade-corner-pooling" aria-hidden="true">#</a> Cascade corner pooling</h1><p>Cascade corner pooling 是一种改进的 corner pooling 技术，用于关键点检测和目标检测任务。它主要通过对 corner pooling 进行层级应用来更有效地捕捉目标的角点。</p><p>工作流程如下：</p><ol><li>对输入特征图应用基本的 corner pooling 层，以捕捉目标的角点信息。</li><li>将基本 corner pooling 层的输出传递到下一个 corner pooling 层。</li><li>重复第2步，直到应用所有的 corner pooling 层。</li><li>将所有 corner pooling 层的输出聚合在一起，生成一个综合的角点表示。</li><li>使用该角点表示进行关键点检测或目标检测任务。</li></ol>',9),l=[c];function a(p,t){return e(),n("div",null,l)}const g=o(i,[["render",a],["__file","corner_pooling.html.vue"]]);export{g as default};
